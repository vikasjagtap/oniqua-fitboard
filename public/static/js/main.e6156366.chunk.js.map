{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["DistanceUnit","App","props","brisbaneOfficeCords","LatLng","denverOfficeCords","L","Util","wrapNum","midPoint","lat","lng","australiaProgressLine","usProgressLine","data","undefined","map","totalDistance_km","distanceTo","totalDistance_miles","mapCreated","polyline","weight","opacity","color","addTo","fetch","then","response","json","progress","updateStats","state","distanceUnit","dataLoading","overallData","usData","australiaData","tableData","areaOverallData","areaUsData","areaAustraliaData","areaChartData","donutChartOptions","getDonutChartOptions","areaChartOptions","getAreaChartOptions","donutChartData","KM","tableHeaders","getTableHeaders","selectedContentIndex","pointA","pointB","angleDeg","GeometryUtil","angle","latlng","destination","closestOnSegment","unit","this","setState","ausTotalDistance_km","australia","usTotalDistance_km","us","isUnitKM","ausTotalDistance","usTotalDistance","totalDistance","distanceColumn","brisProgressPoint","getProgressPoint","denProgressPoint","bindPopup","toFixed","dateCompareFn","a","b","date","raw","row","group","name","Date","value","sort","forEach","console","log","distanceCompareFn","individual","key","header","className","Header","SkipToContent","HeaderName","href","prefix","HeaderGlobalBar","HeaderNavigation","HeaderMenu","menuLinkName","HeaderMenuItem","onClick","changeDistanceUnit","MILES","Content","options","MapContainer","zoomControl","dragging","worldCopyJump","center","zoom","whenCreated","minZoom","maxZoom","TileLayer","noWrap","attribution","url","Marker","position","Popup","ContentSwitcher","selectedIndex","onChange","areaData","Switch","text","DataTableSkeleton","showHeader","showToolbar","headers","DataTable","rows","isSortable","stickyHeader","getHeaderProps","getRowProps","getTableProps","Table","TableHead","TableRow","TableHeader","TableBody","cells","cell","cellValue","info","toLocaleDateString","TableCell","id","loading","height","width","legend","alignment","Alignments","CENTER","donut","label","axes","left","stacked","scaleType","ScaleTypes","LINEAR","mapsTo","bottom","TIME","curve","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6156366.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport {MapContainer, Marker, Popup, TileLayer} from 'react-leaflet';\nimport L, {LatLng, LatLngLiteral, Map as LeafletMap, Polyline} from \"leaflet\";\nimport {\n    Content,\n    ContentSwitcher,\n    DataTable,\n    DataTableSkeleton,\n    Header,\n    HeaderGlobalBar,\n    HeaderMenu,\n    HeaderMenuItem,\n    HeaderName,\n    HeaderNavigation,\n    SkipToContent,\n    Switch,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow\n} from \"carbon-components-react\";\nimport {DonutChart, StackedAreaChart} from \"@carbon/charts-react\";\nimport {Alignments, DonutChartOptions, AreaChartOptions, ScaleTypes} from '@carbon/charts/interfaces';\n\ntype AppStateProps = {\n    overallData: any,\n    usData: any,\n    australiaData: any,\n    tableData: any,\n    donutChartOptions: DonutChartOptions;\n    donutChartData: any,\n    dataLoading: boolean,\n    distanceUnit: DistanceUnit,\n    tableHeaders: any[],\n    areaChartData: any,\n    areaUsData: any,\n    areaAustraliaData: any,\n    areaOverallData: any,\n    selectedContentIndex: number,\n    areaChartOptions: any\n}\n\nenum DistanceUnit {\n    KM = \"km\",\n    MILES = \"miles\"\n}\n\nclass App extends React.Component<any, AppStateProps> {\n    private brisbaneOfficeCords: LatLng = new LatLng(-27.466898152285882, 153.029165642155334);\n    private denverOfficeCords: LatLng = new LatLng(39.627924473980165, L.Util.wrapNum(-104.89594227315469, [0,360], true));\n    private midPoint: LatLngLiteral = {lat: 5.405980169474166, lng: L.Util.wrapNum(-156.74269746105844, [0,360], true)};\n    private australiaProgressLine?: Polyline;\n    private usProgressLine?: Polyline;\n    private data:any = undefined;\n    private map?: LeafletMap;\n    private totalDistance_km = this.brisbaneOfficeCords.distanceTo(this.denverOfficeCords) / 1000;\n    private totalDistance_miles = this.totalDistance_km * 0.621371;\n\n    constructor(props: Readonly<AppStateProps> | AppStateProps) {\n        super(props);\n        this.state = {\n            dataLoading: true,\n            overallData: [],\n            usData: [],\n            australiaData: [],\n            tableData: [],\n            areaOverallData: [],\n            areaUsData: [],\n            areaAustraliaData: [],\n            areaChartData: [],\n            donutChartOptions: App.getDonutChartOptions(true),\n            areaChartOptions: App.getAreaChartOptions(true),\n            donutChartData: [],\n            distanceUnit: DistanceUnit.KM,\n            tableHeaders: this.getTableHeaders(DistanceUnit.KM),\n            selectedContentIndex: 0\n        };\n    }\n\n    getProgressPoint(map: LeafletMap, pointA: LatLngLiteral, pointB: LatLngLiteral, progress: number) {\n        // @ts-ignore\n        const angleDeg = L.GeometryUtil.angle(map, pointA, pointB);\n        // @ts-ignore\n        const latlng = L.GeometryUtil.destination(pointA, angleDeg, progress);\n        // @ts-ignore\n        return L.GeometryUtil.closestOnSegment(map, [latlng.lat, L.Util.wrapNum(latlng.lng, [0, 360], true)], pointA, pointB);\n    }\n\n    changeDistanceUnit(unit: DistanceUnit) {\n        this.setState({distanceUnit: unit, dataLoading: true, donutChartOptions: App.getDonutChartOptions(true)});\n        this.updateStats(unit);\n    }\n\n    mapCreated = (map: LeafletMap) => {\n        // @ts-ignore\n        new L.polyline([this.brisbaneOfficeCords, this.denverOfficeCords], {\n            weight: 8,\n            opacity: 0.3,\n            color: '#ee5396',\n        }).addTo(map);\n\n        this.map = map;\n\n        fetch(\"/api/dashboard\")\n            .then(response => {\n                response.json()\n                    .then(progress => {\n                        this.data = progress;\n                        this.updateStats(this.state.distanceUnit);\n                    });\n            })\n    }\n\n    private updateStats(distanceUnit: DistanceUnit) {\n\n        if (!this.data || !this.map) {\n            return;\n        }\n\n        const ausTotalDistance_km = this.data.australia.totalDistance_km;\n        const usTotalDistance_km = this.data.us.totalDistance_km;\n\n        const isUnitKM = distanceUnit == DistanceUnit.KM;\n        const ausTotalDistance = isUnitKM ? this.data.australia.totalDistance_km : this.data.australia.totalDistance_miles;\n        const usTotalDistance = isUnitKM ? this.data.us.totalDistance_km : this.data.us.totalDistance_miles;\n        const totalDistance = isUnitKM ? this.totalDistance_km : this.totalDistance_miles;\n\n        const distanceColumn = `distance_${distanceUnit}`;\n\n        const brisProgressPoint: LatLng = this.getProgressPoint(this.map, this.brisbaneOfficeCords, this.denverOfficeCords, ausTotalDistance_km * 1000);\n        const denProgressPoint = this.getProgressPoint(this.map, this.denverOfficeCords, this.brisbaneOfficeCords, usTotalDistance_km * 1000);\n\n        if (!this.australiaProgressLine) {\n            // @ts-ignore\n            this.australiaProgressLine = new L.polyline([this.brisbaneOfficeCords, [brisProgressPoint.lat, L.Util.wrapNum(brisProgressPoint.lng, [0, 360], true)]], {\n                weight: 5,\n                color: '#6929c4',\n            }).addTo(this.map);\n        }\n\n        this.australiaProgressLine?.bindPopup(`Australia Progress: ${(ausTotalDistance).toFixed(2)}`);\n\n        if (!this.usProgressLine) {\n            // @ts-ignore\n            this.usProgressLine = new L.polyline([this.denverOfficeCords, [denProgressPoint.lat, L.Util.wrapNum(denProgressPoint.lng, [0, 360], true)]], {\n                weight: 5,\n                color: '#1192e8',\n            }).addTo(this.map);\n        }\n        this.usProgressLine?.bindPopup(`US Progress: ${(usTotalDistance).toFixed(2)}`);\n        const dateCompareFn = (a:any, b:any) => (a.date > b.date) ? 1 : ((b.date > a.date) ? -1 : 0);\n\n        const areaUsData = this.data.us.raw.map((row: any) => ({\n            group: row.name,\n            date: new Date(row.date),\n            value: row[distanceColumn]\n        })).sort(dateCompareFn);\n\n        const areaAustraliaData = this.data.australia.raw.map((row: any) => {\n            return {\n                group: row.name,\n                date: new Date(row.date),\n                value: row[distanceColumn]\n            };\n        }).sort(dateCompareFn);\n\n        areaAustraliaData.forEach((row: any)=> {\n            if (row.group === 'ravi') {\n                console.log(row);\n            }\n        })\n\n        const areaOverallData = [...areaAustraliaData, ...areaUsData].sort(dateCompareFn);\n\n        const distanceCompareFn = (a:any, b:any) => (a[distanceColumn] < b[distanceColumn]) ? 1 : ((b[distanceColumn] < a[distanceColumn]) ? -1 : 0);\n\n        let overallData = [...this.data.us.individual, ...this.data.australia.individual].sort(distanceCompareFn);\n        this.setState({\n            dataLoading: false,\n            overallData: overallData,\n            tableData: overallData,\n            usData: this.data.us.individual.sort(distanceCompareFn),\n            australiaData: this.data.australia.individual.sort(distanceCompareFn),\n            tableHeaders: this.getTableHeaders(distanceUnit),\n            donutChartData: [\n                {group: 'US', value: usTotalDistance},\n                {group: 'Australia', value: ausTotalDistance},\n                {group: 'Remaining', value: totalDistance - (ausTotalDistance + usTotalDistance)}\n            ],\n            donutChartOptions: App.getDonutChartOptions(false),\n            areaUsData,\n            areaAustraliaData,\n            areaOverallData,\n            areaChartData: areaOverallData,\n            areaChartOptions: App.getAreaChartOptions(false),\n            selectedContentIndex: 0\n        });\n    }\n\n    private static getDonutChartOptions(loading: boolean): DonutChartOptions {\n        return {\n            height: \"400px\",\n            width: \"100%\",\n            legend: {\n                alignment: Alignments.CENTER\n            },\n            donut: {\n                center: {\n                    label: `Total Distance`\n                },\n                alignment: Alignments.CENTER\n            },\n            data: {\n                loading: loading\n            }\n        };\n    }\n\n    private static getAreaChartOptions(loading: boolean): AreaChartOptions {\n        return {\n            data: {\n                loading: loading\n            },\n            axes: {\n                left: {\n                    stacked: true,\n                    scaleType: ScaleTypes.LINEAR,\n                    mapsTo: \"value\"\n                },\n                bottom: {\n                    scaleType: ScaleTypes.TIME,\n                    mapsTo: \"date\"\n                }\n            },\n            curve: \"curveMonotoneX\",\n            height: \"400px\"\n        };\n    }\n\n    getTableHeaders(unit: DistanceUnit) {\n        return [\n            {\n                key: 'name',\n                header: 'Name',\n            },\n            {\n                key: 'date',\n                header: 'Latest Date'\n            },\n            {\n                key: `distance_${unit}`,\n                header: 'Distance',\n            },\n            {\n                key: 'time',\n                header: 'Time (min)',\n            },\n        ]\n    }\n\n    render() {\n        // @ts-ignore\n        // @ts-ignore\n        return (\n\n            <div className={\"main-content\"}>\n                <Header aria-label=\"Oniqua fit board\">\n                    <SkipToContent/>\n                    <HeaderName href=\"#\" prefix=\"Oniqua\">\n                        Fit-board\n                    </HeaderName>\n                    <HeaderGlobalBar>\n                        <HeaderNavigation aria-label=\"\">\n                            <HeaderMenu aria-label=\"Distance Unit\" menuLinkName={`Distance Unit (${this.state.distanceUnit})` }>\n                                <HeaderMenuItem href=\"#\" onClick={() => this.changeDistanceUnit(DistanceUnit.KM)}>{DistanceUnit.KM}</HeaderMenuItem>\n                                <HeaderMenuItem href=\"#\" onClick={() => this.changeDistanceUnit(DistanceUnit.MILES)}>{DistanceUnit.MILES}</HeaderMenuItem>\n                            </HeaderMenu>\n                        </HeaderNavigation>\n                    </HeaderGlobalBar>\n                </Header>\n                <Content>\n                    <div className={\"aggregates\"}>\n                        <div>\n                            <h2>Australia to US Challenge</h2>\n                        </div>\n                        <div className={\"chart\"}>\n                            <DonutChart data={this.state.donutChartData} options={this.state.donutChartOptions}/>\n                        </div>\n                        <MapContainer zoomControl={false} dragging={false} worldCopyJump={true} className={\"map\"} center={this.midPoint} zoom={2.5} whenCreated={this.mapCreated} minZoom={2.5} maxZoom={2.5}>\n                            <TileLayer\n                                noWrap={false}\n                                attribution='Map tiles by Carto, under CC BY 3.0. Data by OpenStreetMap, under ODbL.'\n                                url=\"https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n                            />\n                            <Marker position={this.brisbaneOfficeCords}>\n                                <Popup>\n                                    Brisbane Office\n                                </Popup>\n                            </Marker>\n                            <Marker position={this.denverOfficeCords}>\n                                <Popup>\n                                    Denver Office\n                                </Popup>\n                            </Marker>\n                        </MapContainer>\n                    </div>\n                    <div className={\"stats\"}>\n                        <ContentSwitcher selectedIndex={this.state.selectedContentIndex} className={\"table-data-switcher\"} onChange={(data) => {\n                            let tableData: any;\n                            let areaData: any;\n                            switch (data.name) {\n                                case \"us\":\n                                    tableData = this.state.usData;\n                                    areaData = this.state.areaUsData;\n                                    break;\n                                case \"australia\":\n                                    tableData = this.state.australiaData;\n                                    areaData = this.state.areaAustraliaData;\n                                    break;\n                                default:\n                                    tableData = this.state.overallData;\n                                    areaData = this.state.areaOverallData\n                                    break;\n                            }\n\n                            this.setState({tableData, areaChartData: areaData});\n\n                        }}>\n                            <Switch name=\"overall\" text=\"Overall\"/>\n                            <Switch name=\"australia\" text=\"Australia\"/>\n                            <Switch name=\"us\" text=\"US\"/>\n                        </ContentSwitcher>\n                        <div className={\"area-chart-container\"}>\n                            <StackedAreaChart data={this.state.areaChartData} options={this.state.areaChartOptions}/>\n                        </div>\n                        <div className={\"table-container\"}>\n                            {\n                                this.state.dataLoading ? <DataTableSkeleton showHeader={false} showToolbar={false} headers={this.state.tableHeaders} /> :\n                                    <DataTable rows={this.state.tableData} headers={this.state.tableHeaders} isSortable stickyHeader>\n                                        {({\n                                              //@ts-ignore\n                                              rows, headers, getHeaderProps, getRowProps, getTableProps\n                                          }) => (\n                                            <Table {...getTableProps()}>\n                                                <TableHead>\n                                                    <TableRow>\n                                                        {headers.map((header: any) => (\n                                                            <TableHeader key={header.key} {...getHeaderProps({header})}>\n                                                                {header.header}\n                                                            </TableHeader>\n                                                        ))}\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {rows.map((row: any) => (\n                                                        <TableRow key={row.id} {...getRowProps({row})}>\n                                                            {row.cells.map((cell: any) => {\n                                                                let cellValue;\n                                                                switch (cell.info.header) {\n                                                                    case 'distance_km':\n                                                                    case 'distance_miles':\n                                                                    case 'time':\n                                                                        cellValue =  cell.value.toFixed(2);\n                                                                        break;\n                                                                    case 'date':\n                                                                        const date = new Date(cell.value);\n                                                                        cellValue = date.toLocaleDateString();\n                                                                        break;\n                                                                    default:\n                                                                        cellValue = cell.value;\n                                                                }\n\n                                                                return <TableCell key={cell.id}>{cellValue}</TableCell>\n                                                            })}\n                                                        </TableRow>\n                                                    ))}\n                                                </TableBody>\n                                            </Table>\n                                        )}\n                                    </DataTable>\n                            }\n                        </div>\n\n\n                    </div>\n\n                </Content>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}